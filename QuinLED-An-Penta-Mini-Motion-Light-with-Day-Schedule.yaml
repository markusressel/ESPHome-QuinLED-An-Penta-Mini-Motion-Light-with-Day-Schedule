packages:
  device_base: !include packages/device/quinled_an_penta_mini.yaml
  config: !include config.yaml

  # for WiFi use packages/network/wifi.yaml
  # for Ethernet use packages/network/ethernet.yaml (cannot be used together with WiFi)
  network: !include packages/network/wifi.yaml

  # for using an NTP server (without Home Assistant), use packages/time/sntp.yaml
  # if you are running Home Assistant, use packages/time/homeassistant.yaml
  time: !include packages/time/sntp.yaml

  light: !include
    # for CCT strip use packages/light/cct.yaml
    # for RGBW strip use packages/light/rgbw.yaml
    file: packages/light/cct.yaml
    vars:
      # for CCT strip use whatever range your CCT strip supports (e.g. 2700-5500)
      # for RGBW strip use 1000-5500
      color_temp_min_kelvin: "2700"
      color_temp_max_kelvin: "5500"

  # (optional) IR Remote Control
  ir_remote: !include
    file: packages/ir-remote.yaml
    vars:
      ir_receiver_data_pin: GPIO2
      ir_10_percent_brightness: "25"
      ir_30_percent_brightness: "76"
      ir_50_percent_brightness: "127"
      ir_70_percent_brightness: "178"
      ir_100_percent_brightness: "255"
      ir_color_temp_warm: "2700"
      ir_color_temp_mixed: "4100"
      ir_color_temp_cold: "5500"

substitutions:
  # PIR sensor
  pir_off_latency: "1"  # seconds

esphome:
  name: motion-light
  name_add_mac_suffix: true
  on_boot:
    priority: -1000.0
    then:
      - script.execute: update_presence_state

#Disable logging/UART
logger:
  level: DEBUG
  #level: NONE
  #baud_rate: 0

mdns:
  disabled: true

ota:
  platform: esphome
  password: !secret esphome_ota_pass

api:
  reboot_timeout: 60min
  password: !secret esphome_api_pass

# === Sensors ===
# Motion Sensor 1 on B3
# Motion Sensor 2 on B2

# === Lights ===
# Warm White on L1
# Cold White on L2

globals:
  # Defines a stage based on the current time and sun position.
  # Values: ["day", "transition", "night"]
  - id: current_cycle_stage
    type: std::string
    restore_value: no
    initial_value: '"night"'
  - id: last_set_light_brightness
    type: int
    restore_value: no
    initial_value: '100'
  - id: last_set_light_color_temp
    type: int
    restore_value: no
    initial_value: '2700'
  - id: current_presence_state
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: current_light_on_state
    type: bool
    restore_value: no
    initial_value: 'false'

sun:
  id: sun_entity
  latitude: !secret home_latitude
  longitude: !secret home_longitude
  on_sunrise:
    - then:
        - script.execute: update_presence_state
  on_sunset:
    - then:
        - script.execute: update_presence_state

web_server:
  port: 80
  include_internal: True

script:
  - id: enable_user_override
    then:
      - logger.log: User override enabled
      - switch.turn_on: state_user_override_active

  - id: flash_twice
    then:
      - if:
          condition:
            - lambda: 'return id(current_light_on_state) == false;'
          then:
            - light.turn_on:
                id: light_entity
                transition_length: 0s
            - delay: 0.2s
      - light.turn_off:
          id: light_entity
          transition_length: 0s
      - delay: 0.2s
      - light.turn_on:
          id: light_entity
          transition_length: 0s
      - delay: 0.2s
      - light.turn_off:
          id: light_entity
          transition_length: 0s
      - delay: 0.2s
      - light.turn_on:
          id: light_entity
          transition_length: 0s
      - delay: 0.2s

  - id: reset_user_override
    then:
      - logger.log: User override disabled
      - if:
          condition:
            - switch.is_on: state_user_override_active
          then:
            - script.execute: flash_twice
            - script.wait: flash_twice
            - switch.turn_off: state_user_override_active
      - script.execute: update_presence_state

  - id: update_presence_state
    mode: queued
    then:
      - logger.log: Updating Presence State...
      - globals.set:
          id: current_presence_state
          value: !lambda |-
            bool sensor1 = false;
            if (id(config_use_presence_1).state) {
              sensor1 = id(B3).state;
            }
            bool sensor2 = false;
            if (id(config_use_presence_2).state) {
              sensor2 = id(B2).state;
            }
            return sensor1 || sensor2;
      - logger.log:
          format: "Combined Presence State: %d"
          args: [ 'id(current_presence_state)' ]
          level: INFO
      - script.execute: apply_presence_state

  - id: apply_presence_state
    mode: restart
    then:
      - logger.log: Applying Presence State...
      - if:
          condition:
            - lambda: 'return id(state_user_override_active).state == true;'
          then:
            - logger.log: User override active, skipping light control
          else:
            - if:
                condition:
                  - lambda: 'return id(current_presence_state) == true;'
                then:
                  - script.execute: update_cycle_stage
                  - script.execute: turn_on_light
                else:
                  - script.execute: turn_off_light

  - id: update_cycle_stage
    mode: queued
    then:
      - logger.log: Updating Cycle Stage...
      - globals.set:
          id: current_cycle_stage
          value: !lambda |-
            auto current_time = id(time_entity).now();
            bool time_valid = current_time.is_valid();
            if (!time_valid) {
              ESP_LOGW("update_cycle_stage", "Time is not valid, defaulting to night");
              return "night";
            }
            
            int night_hour = id(config_night_hour).state;
            int morning_hour = id(config_morning_hour).state;
            
            esphome::sun::Sun* sun = id(sun_entity);
            bool sun_below_horizon = sun->elevation() < 0;
            
            bool before_night_hour = current_time.hour < night_hour;
            bool before_morning_hour = current_time.hour < morning_hour;
            
            if (sun_below_horizon) {
              if (before_morning_hour) {
                return "night";
              } else if (before_night_hour) {
                return "transition";
              } else {
                return "night";
              }
            } else {
              if (before_morning_hour) {
                return "transition";
              } else if (before_night_hour) {
                return "day";
              } else {
                return "transition";
              }
            }
      - logger.log:
          format: "Current Cycle Stage: %s"
          args: [ 'id(current_cycle_stage).c_str()' ]
          level: INFO
      - script.execute: update_light_props

  - id: update_light_props
    mode: restart
    then:
      - logger.log: Updating Light properties...
      - globals.set:
          id: last_set_light_brightness
          value: !lambda |-
            std::string stage = id(current_cycle_stage);
            
            int daytime_brightness = id(config_daytime_brightness).state;
            int transition_brightness = id(config_transition_brightness).state;
            int night_brightness = id(config_night_brightness).state;
            
            if (stage == "day") {
              return daytime_brightness;
            } else if (stage == "transition") {
              return transition_brightness;
            } else {
              return night_brightness;
            }
      - globals.set:
          id: last_set_light_color_temp
          value: !lambda |-
            std::string stage = id(current_cycle_stage);

            int daytime_color_temp = id(config_daytime_color_temp).state;
            int transition_color_temp = id(config_transition_color_temp).state;
            int night_color_temp = id(config_night_color_temp).state;
            
            if (stage == "day") {
              return daytime_color_temp;
            } else if (stage == "transition") {
              return transition_color_temp;
            } else {
              return night_color_temp;
            }
      - logger.log:
          format: "Updated light properties: Brightness %.1d ; Color Temperature %.1d"
          args: [ 'id(last_set_light_brightness)', 'id(last_set_light_color_temp)' ]
          level: INFO

  - id: apply_light_props
    mode: restart
    then:
      - logger.log: Applying Light properties...
      - if:
          condition:
            - and:
                - lambda: 'return id(current_light_on_state) == true;'
                - lambda: 'return id(state_user_override_active).state == false;'
          then:
            - script.execute: turn_on_light

  - id: turn_off_light
    mode: single
    then:
      - logger.log: Turning off light...
      - light.control:
          id: light_entity
          state: off
          transition_length: 3s

  - id: turn_on_light
    mode: queued
    then:
      - logger.log: Turning on light...
      - light.control:
          id: light_entity
          state: on
          brightness: !lambda 'return float(id(last_set_light_brightness)) / 255.0;'
          # conversion from kelvin to mired
          color_temperature: !lambda 'return 1000000.0 / float(id(last_set_light_color_temp));'
          transition_length: 500ms

# === Sensors ===

binary_sensor:
  #- platform: gpio
  #  id: B1
  #  pin: 2
  #  name: ${esphome_name}-Button_1
  #  filters:
  #    - invert:

  - platform: gpio
    id: B2
    name: "Sensor: Presence 2"
    device_class: motion
    pin:
      number: 8
    filters:
      - delayed_off: !lambda 'return ${pir_off_latency} * 1000.0;'
    on_state:
      then:
        - script.execute: update_presence_state

  - platform: gpio
    id: B3
    name: "Sensor: Presence 1"
    device_class: motion
    pin:
      number: 9
    filters:
      - delayed_off: !lambda 'return ${pir_off_latency} * 1000.0;'
    on_state:
      then:
        - script.execute: update_presence_state

# === System ===

switch:
  - platform: template
    name: "State: User Override Active"
    optimistic: True
    restore_mode: ALWAYS_OFF
    id: state_user_override_active
    on_turn_off:
      - script.execute: reset_user_override
      - script.execute: update_presence_state

  - platform: restart
    name: "== System: Restart"
    id: restart_switch

sensor:
  - platform: uptime
    name: "== System: Uptime Sensor"

  - platform: wifi_signal
    name: "== Network: WiFi Signal"
    update_interval: 60s

  - platform: internal_temperature
    name: "== System: Internal Temperature"
    accuracy_decimals: 2
    update_interval: 30s
